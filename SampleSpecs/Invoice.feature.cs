// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SampleSpecs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class SupportOfInvoicingForSalesDepartamentFeature : Xunit.IClassFixture<SupportOfInvoicingForSalesDepartamentFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Invoice.feature"
#line hidden
        
        public SupportOfInvoicingForSalesDepartamentFeature(SupportOfInvoicingForSalesDepartamentFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Support of invoicing for sales departament", @"   As a seller I want to be able to create an invoice to put ordered items on it
   As a seller I want to be able to put items on invoice to calculate total sum
   As a seller I want to be able to change invoice date to specify sale date
   As a seller I want to be able to close invoice so it cannot be changed", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Opening invoice")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Opening invoice")]
        public virtual void OpeningInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Opening invoice", ((string[])(null)));
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
   testRunner.Given("is an empty unopened invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
   testRunner.When("I open it for some customer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
   testRunner.Then("it will report an owner", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 11
      testRunner.And("open state", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Unopened invoice modification")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Unopened invoice modification")]
        public virtual void UnopenedInvoiceModification()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Unopened invoice modification", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
   testRunner.Given("is an empty unopened invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Price",
                        "Amount"});
            table1.AddRow(new string[] {
                        "1",
                        "1.00",
                        "1"});
#line 15
   testRunner.When("I add an item:", ((string)(null)), table1, "When ");
#line 18
   testRunner.Then("I should get an error \"You need to open invoice befor modification.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Calculate total sum")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Calculate total sum")]
        public virtual void CalculateTotalSum()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate total sum", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
   testRunner.Given("is an open invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Price",
                        "Amount"});
            table2.AddRow(new string[] {
                        "1",
                        "5.00",
                        "3"});
            table2.AddRow(new string[] {
                        "2",
                        "3.50",
                        "1"});
            table2.AddRow(new string[] {
                        "3",
                        "1.50",
                        "2"});
#line 22
   testRunner.When("I add a few items:", ((string)(null)), table2, "When ");
#line 27
   testRunner.Then("total sum should be equal to 21.50", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Sum amount of the same items")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Sum amount of the same items")]
        public virtual void SumAmountOfTheSameItems()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sum amount of the same items", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
   testRunner.Given("is an open invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Price",
                        "Amount"});
            table3.AddRow(new string[] {
                        "1",
                        "5.00",
                        "3"});
            table3.AddRow(new string[] {
                        "1",
                        "5.00",
                        "4"});
#line 31
   testRunner.When("I add twice the same item:", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Price",
                        "Amount"});
            table4.AddRow(new string[] {
                        "1",
                        "5.00",
                        "7"});
#line 35
   testRunner.Then("it should contian item:", ((string)(null)), table4, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Set invoice sale date")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Set invoice sale date")]
        public virtual void SetInvoiceSaleDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set invoice sale date", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
   testRunner.Given("is an open invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
   testRunner.When("I set a sale date \'2017-07-07\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
      testRunner.And("I set a sale date \'2017-08-08\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
   testRunner.Then("an invoice should present the last one \'2017-08-08\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Cannot set a sale date on unopen invoice")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Cannot set a sale date on unopen invoice")]
        public virtual void CannotSetASaleDateOnUnopenInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cannot set a sale date on unopen invoice", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
   testRunner.Given("is an empty unopened invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 47
   testRunner.When("I set a sale date \'2017-07-07\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 48
   testRunner.Then("I should get an error \"You need to open invoice befor modification.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Close valid invoice")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Close valid invoice")]
        public virtual void CloseValidInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Close valid invoice", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
   testRunner.Given("is an open invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Price",
                        "Amount"});
            table5.AddRow(new string[] {
                        "1",
                        "1.00",
                        "1"});
#line 52
      testRunner.And("it contians item", ((string)(null)), table5, "And ");
#line 55
      testRunner.And("it has set a date \'2017-07-07\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
   testRunner.When("I close it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 57
   testRunner.Then("it should report as closed not blank", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Close an empty invoice")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Close an empty invoice")]
        public virtual void CloseAnEmptyInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Close an empty invoice", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
   testRunner.Given("is an open invoice without items", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 61
   testRunner.When("I close it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 62
   testRunner.Then("I should get an error \"Cannot close an empty invoice.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Close an invoice without sell date")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Close an invoice without sell date")]
        public virtual void CloseAnInvoiceWithoutSellDate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Close an invoice without sell date", ((string[])(null)));
#line 64
this.ScenarioSetup(scenarioInfo);
#line 65
   testRunner.Given("is an open invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Price",
                        "Amount"});
            table6.AddRow(new string[] {
                        "1",
                        "1.00",
                        "1"});
#line 66
      testRunner.And("it contians item", ((string)(null)), table6, "And ");
#line 69
   testRunner.When("I close it", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
   testRunner.Then("I should get an error \"Cannot close invoice without sell date.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Add item to closed invoice")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Add item to closed invoice")]
        public virtual void AddItemToClosedInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add item to closed invoice", ((string[])(null)));
#line 72
this.ScenarioSetup(scenarioInfo);
#line 73
   testRunner.Given("is a closed invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ProductId",
                        "Price",
                        "Amount"});
            table7.AddRow(new string[] {
                        "1",
                        "5.00",
                        "3"});
#line 74
   testRunner.When("I add an item:", ((string)(null)), table7, "When ");
#line 77
   testRunner.Then("I should get an error \"Cannot modify closed invoice.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Set sell date on closed invoice")]
        [Xunit.TraitAttribute("FeatureTitle", "Support of invoicing for sales departament")]
        [Xunit.TraitAttribute("Description", "Set sell date on closed invoice")]
        public virtual void SetSellDateOnClosedInvoice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set sell date on closed invoice", ((string[])(null)));
#line 79
this.ScenarioSetup(scenarioInfo);
#line 80
   testRunner.Given("is a closed invoice", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 81
   testRunner.When("I set a sale date \'2017-07-01\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 82
   testRunner.Then("I should get an error \"Cannot modify closed invoice.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                SupportOfInvoicingForSalesDepartamentFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                SupportOfInvoicingForSalesDepartamentFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
